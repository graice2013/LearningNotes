#
# file operators, integer comparison operators and string comparison operators
#
1) file operators
    -e, -s, -r, -w, -x etc.
    
    Operator	Description	                                                                            Example
    -b file	    Checks if file is a block special file; if yes, then the condition becomes true.	    [ -b $file ] is false.
    -c file	    Checks if file is a character special file; if yes, then the condition becomes true.	[ -c $file ] is false.
    -d file	    Checks if file is a directory; if yes, then the condition becomes true.	                [ -d $file ] is not true.
    -f file	    Checks if file is an ordinary file as opposed to a directory or special file; 
                if yes, then the condition becomes true.	                                            [ -f $file ] is true.
    -g file	    Checks if file has its set group ID (SGID) bit set; 
                if yes, then the condition becomes true.	                                            [ -g $file ] is false.
    -k file	    Checks if file has its sticky bit set; if yes, then the condition becomes true.	        [ -k $file ] is false.
    -p file	    Checks if file is a named pipe; if yes, then the condition becomes true.	            [ -p $file ] is false.
    -t file	    Checks if file descriptor is open and associated with a terminal; 
                if yes, then the condition becomes true.	                                            [ -t $file ] is false.
    -u file	    Checks if file has its Set User ID (SUID) bit set; 
                if yes, then the condition becomes true.	                                            [ -u $file ] is false.
    -r file	    Checks if file is readable; if yes, then the condition becomes true.	                [ -r $file ] is true.
    -w file	    Checks if file is writable; if yes, then the condition becomes true.	                [ -w $file ] is true.
    -x file	    Checks if file is executable; if yes, then the condition becomes true.	                [ -x $file ] is true.
    -s file	    Checks if file has size greater than 0; if yes, then condition becomes true.	        [ -s $file ] is true.
    -e file	    Checks if file exists; is true even if file is a directory but exists.	                [ -e $file ] is true.

    [[ is bash-specific syntax. For POSIX-compatible shells, you need:
        [ -f file1 ] && [ -f file2 ]

2) integer comparison operators
    -eq, -ne, -lt, -gt, >, >= etc.

3) string comparison operators
    =, !=, >, <, -n, -z etc.
    
    e.g. 
        a=4
        b=5
        
        #  Here "a" and "b" can be treated either as integers or strings.
        #  There is some blurring between the arithmetic and string comparisons,
        #+ since Bash variables are not strongly typed.
        
        #  Bash permits integer operations and comparisons on variables
        #+ whose value consists of all-integer characters.
        #  Caution advised, however.
        
        echo
        
        if [ "$a" -ne "$b" ]
        then
          echo "$a is not equal to $b"
          echo "(arithmetic comparison)"
        fi

    or
        if [ -n "$string1" ]  # This time, $string1 is quoted.
        then
          echo "String \"string1\" is not null."
        else  
          echo "String \"string1\" is null."
        fi                    # Quote strings within test brackets!

    or
        if [ "$x" == "valid" ]; then
          echo "x has the value 'valid'"
        fi

    or
        [ "$x" == "valid" ] && echo "x has the value 'valid'"
        
    or
        [ "$x" == "valid" ] && echo "valid" || echo "invalid"
            
    or
        To compare strings with wildcards use

            if [[ "$stringA" == *$stringB* ]]; then
              # Do something here
            else
              # Do Something here
            fi
    
# ref:  https://www.tutorialspoint.com/unix/unix-file-operators.htm
# ref:  https://stackoverflow.com/questions/8971012/how-to-test-for-if-two-files-exist
# ref:  http://tldp.org/LDP/abs/html/comparison-ops.html
# ref:  https://stackoverflow.com/questions/2237080/how-to-compare-strings-in-bash

