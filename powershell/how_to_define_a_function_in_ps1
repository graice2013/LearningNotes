#
# how to define function in ps
#
1) with or without default value

 with default value:
  1.1) function Add-Number {
    Param( $intOne,
      $intTwo)
    $intOne + $intTwo
  }
  1.2) function Get-BiosParam {
    Param(
      $computerName = $env:COMPUTERNAME
     )
     Get-WmiObject -Class win32_bios -ComputerName $computerName
  }
  
  # run a function
  .\Get-BiosParam.ps1
  .\Get-BiosParam.ps1 -computerName ${Computer_Name}
  
 1.3) without a default value:
  Param( $intOne = 5,
    $intTwo = 3)
  function Add-Number
  {
    Param( $intONe,
      $intTwo)
     $intOne + $intTwo
     
  }
  
  # run a function
  add-number -intOne 2 -intTwo 5
  add-number
  add-number 10 11
  
  # dot-source a function
  . ${PS_script1}.ps1
  dir function:\ad*

2) an advanced function, also called a script cmdlet
 
  function Do-Something {
   <#
   .SYNOPSIS
   Describe the function here
   .DESCRIPTION
   Describe the function in more detail
   .EXAMPLE
   Give an example here
   .EXAMPLE
   Give another example here
   .PARAMETER computerName
   The computer name to query, Just one.
   .PARAMETER logname
   The name of a file to write failed computer name to. Deafults to errors.txt.
   #>
   
   [CmdletBinding(SupportsShouldProcess=$True, ConfirmImpact='Low')]
   param
   (
    [Parameter(Mandatory=$True,
      ValueFromPipeline=$True,
      ValueFromPipelineByPropertyName=$True,
      HelpMessage='What computer name would you like to target?')]
    [Alias('host')]
    [ValidateLength(3,30)]
    [string[]]$computerName,
    
    [string]$logname = 'errors.txt'
   )
   
   begin {
    write-verbose "Deleting $logname"
    del $logname -ErrorActionSilentlyContinue
   },
   
   process {
    write-verbse "Beginning process loop"
    
    foreach ($computer in $computerName) {
     write-verbose "Processing $computer"
     if ($pscmdlet.shouldProcess($computer)) {
      # use $computer here
     }
    }
   } 
  }
