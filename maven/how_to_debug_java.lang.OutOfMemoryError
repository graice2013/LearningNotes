
#
# debug build failure in a jenkins job
#
# cause of "java.lang.OutOfMemoryError: GC overhead limit exceeded" in maven build
Phenomenon:

[DEBUG] All known ContainerDescriptorHandler components: [file-aggregator, metaInf-services, metaInf-spring, plexus]
[DEBUG] FileSet[] dir perms: -1 file perms: -1
[DEBUG] The archive base directory is 'null'
[DEBUG] NOT reformatting any files in /
[DEBUG] Adding file-set from directory: '/'
assembly output directory is: ''
[DEBUG] Adding file-set in: / to archive location:
[DEBUG] Adding exclude for assembly working-directory: ar/jenkins/workspace/***/***/target/assembly/work
File-Set source directory: /
[DEBUG] FileSet[] dir perms: -1 file perms: -1
[DEBUG] The archive base directory is 'null'
[DEBUG] NOT reformatting any files in /var/jenkins/workspace/***/***/target/bin/***/WebContent
[DEBUG] Adding file-set from directory: '/var/jenkins/workspace/***/***/target/bin/***/WebContent'
assembly output directory is: ''
[DEBUG] Adding file-set in: /var/jenkins/workspace/***/***/target/bin/***/WebContent to archive location:
[DEBUG] Cannot find ArtifactResolver with hint: project-cache-aware
org.codehaus.plexus.component.repository.exception.ComponentLookupException: java.util.NoSuchElementException
      role: org.apache.maven.artifact.resolver.ArtifactResolver
  roleHint: project-cache-aware
        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:267)
        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:243)
        at org.apache.maven.shared.repository.DefaultRepositoryAssembler.contextualize(DefaultRepositoryAssembler.java:721)
        at org.eclipse.sisu.plexus.PlexusLifecycleManager.contextualize(PlexusLifecycleManager.java:282)
        at org.eclipse.sisu.plexus.PlexusLifecycleManager.activate(PlexusLifecycleManager.java:203)
        at org.eclipse.sisu.bean.BeanScheduler$Pending.activate(BeanScheduler.java:156)
        at org.eclipse.sisu.bean.BeanScheduler$Activator.onProvision(BeanScheduler.java:185)
        at com.google.inject.internal.ProvisionListenerStackCallback$Provision.provision(ProvisionListenerStackCallback.java:126)
        at com.google.inject.internal.ProvisionListenerStackCallback.provision(ProvisionListenerStackCallback.java:68)
        at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:63)
        at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
        at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
        at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
        at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
        at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
        at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
        at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
        at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
        at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
        at org.eclipse.sisu.inject.LazyBeanEntry.getValue(LazyBeanEntry.java:81)
        at org.eclipse.sisu.plexus.LazyPlexusBean.getValue(LazyPlexusBean.java:51)
        at org.eclipse.sisu.wire.EntryListAdapter$ValueIterator.next(EntryListAdapter.java:111)
        at org.apache.maven.plugin.assembly.archive.DefaultAssemblyArchiver.createArchive(DefaultAssemblyArchiver.java:181)
        at org.apache.maven.plugin.assembly.mojos.AbstractAssemblyMojo.execute(AbstractAssemblyMojo.java:436)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
        at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:497)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: java.util.NoSuchElementException
        at java.util.Collections$EmptyIterator.next(Collections.java:4189)
        at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:263)
        ... 45 more
[DEBUG] No dependency sets specified.
...
[ERROR] GC overhead limit exceeded -> [Help 1]
java.lang.OutOfMemoryError: GC overhead limit exceeded
        at java.lang.String.substring(String.java:1957)
        at java.util.StringTokenizer.nextToken(StringTokenizer.java:352)
        at org.codehaus.plexus.util.MatchPattern.tokenizePathToString(MatchPattern.java:115)
        at org.codehaus.plexus.util.MatchPatterns.matches(MatchPatterns.java:32)
        at org.codehaus.plexus.util.AbstractScanner.isIncluded(AbstractScanner.java:345)
        at org.codehaus.plexus.util.DirectoryScanner.scandir(DirectoryScanner.java:531)
        at org.codehaus.plexus.util.DirectoryScanner.scandir(DirectoryScanner.java:521)
        at org.codehaus.plexus.util.DirectoryScanner.scandir(DirectoryScanner.java:521)
        at org.codehaus.plexus.util.DirectoryScanner.scandir(DirectoryScanner.java:521)
        at org.codehaus.plexus.util.DirectoryScanner.scandir(DirectoryScanner.java:521)
[ERROR]
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/OutOfMemoryError

# similar java.OutOfMemoryError https://samebug.io/exceptions/392812/java.lang.OutOfMemoryError/java-heap-space?soft=false

# command used:
maven-clean-plugin:2.5:clean (default-clean) @ *.parent ---
maven-clean-plugin:2.5:clean (default-clean) @ * ---
maven-dependency-plugin:2.8:copy (copy * for *)
maven-antrun-plugin:1.7:run (unzip * by Ant)
maven-antrun-plugin:1.7:run (build *** by Ant) @
maven-assembly-plugin:2.4:single (make-assembly) @ *** ---


debug steps:
1) local maven build NOT ok.
	#NOT ok export MAVEN_OPTS='-Xms512m -Xmx1024m -XX:MaxMetaspaceSize=512m'
	#NOT ok export MAVEN_OPTS='-Xms1024m -Xmx2048m -XX:MaxMetaspaceSize=1024m'
	# command on linux in ps:
	root     10180  5671 99 17:11 pts/0    00:17:58 /usr/java/jdk1.8.0_45//bin/java -Xms1024m -Xmx2048m -XX:MaxMetaspaceSize=1024m -classpath /maven/boot/plexus-classworlds-2.5.2.jar -Dclassworlds.conf=/maven/bin/m2.conf -Dmaven.home=/maven -Dmaven.multiModuleProjectDirectory=/var/jenkins/workspace/*** org.codehaus.plexus.classworlds.launcher.Launcher -X clean package



for SDK7: -Xms512m -Xmx1024m -XX:MaxPermSize=512m
for SDK8: -Xms512m -Xmx1024m -XX:MaxMetaspaceSize=512m

MAVEN_OPTS=-XX:MaxPermSize=256m	# deprecated. Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0 # use in XX:MaxMetaspaceSize in JDK8
(or MAVEN_OPTS=-Xms2014m -XX:MaxPermSize=512m)	# deprecated. Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0 # use in XX:MaxMetaspaceSize 

# ref doc: https://cwiki.apache.org/confluence/display/MAVEN/OutOfMemoryError
	
	
	
2) jenkins job.
	enlarging JVM heap size NOT ok.
	Build -> Invoke top-level Maven targets ->
		JVM Options:	-Xms512m -Xmx1024m -XX:MaxMetaspaceSize=512m -Xdebug
		Goals :			-X clean package
	# ref doc: http://stackoverflow.com/questions/9893098/how-can-i-tell-jenkins-i-do-want-the-full-error-trace-from-a-maven-job

Root cause:
	directory in ***/src/assembly/main.xml was set wrong: was set to / root directory on linux.

	<assembly>
		<id>main</id>
		<formats>
			<!-- zip,tar,tar.gz,tar.bz2,jar,dir,war -->
			<format>war</format>
		</formats>
		<includeBaseDirectory>false</includeBaseDirectory>
		<!-- need to package fileset -->
		<fileSets>
			<fileSet>
				<directory>/</directory>
				<outputDirectory>/</outputDirectory>
				<includes>
					<include>release notes.txt</include>
				</includes>
			</fileSet>
			<fileSet>
				<directory>target/bin/***/WebContent</directory>
				<outputDirectory>/</outputDirectory>
				<includes>
					<include>docs/**</include>
				...
			</fileSet>
		<fileSets>
	</assembly>

	
Solution:
	update it from 
		<directory>/</directory>
	to
		<directory>../</directory>

# details of Class DirectoryScanner in org.codehaus.plexus.util :
	# ref doc: https://repository.jboss.org/nexus/content/unzip/unzip/org/codehaus/plexus/plexus-utils/3.0.15/plexus-utils-3.0.15-javadoc.jar-unzip/org/codehaus/plexus/util/DirectoryScanner.html
	
# a comment:
Your assembly descriptor contains a
<fileSet>
<directory>/</directory>
<includes>
<include>LICENSE</include>
</includes>
</fileSet>
Which basically has directoryscanner scanning your complete file system from the root down. You may not have sufficient ram to do this.		
# ref doc: https://issues.apache.org/jira/browse/MASSEMBLY-651


I *think* that error means that the assembly filter sets you defined
(dependencies, files, modules, etc) don't match anything in your
projects and thus would have resulted in an empty zip/tgz/bzip file.
It treats that as an error. 
# ref doc: http://shibboleth.1660669.n2.nabble.com/Maven-error-Cannot-find-ArtifactResolver-with-hint-project-cache-aware-td7364799.html



