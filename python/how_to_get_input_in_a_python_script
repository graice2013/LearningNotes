#
# get input in a python script
#
1) use sys.argv
	
	#!/usr/bin/python
	import sys	
	def main():
		# print command line arguments
		for arg in sys.argv[1:]:
			print arg	
	if __name__ == "__main__":
		main()

	Try it out:
		$ python cmdline_args.py arg1 arg2 arg3
		arg1
		arg2
		arg3

2) use optparse
		from   optparse import OptionParser
		if __name__ == '__main__':
			# get input options
			parser = OptionParser()
			parser.add_option("-n", "--nodename", dest="nodename", help="node name to be checked")
			parser.add_option("-d", "--debug",    dest="debug",    help="output more information for debugging purpose", action="store_true", default=False)
			options, arguments = parser.parse_args()
			if options.nodename:
				log_print( "The given nodename is: %s" %(options.nodename), "INFO " )
				JenkinsSlaveUpdater(options.nodename, options.debug).CreateAJSlaveXmlFromJnlpFile()
				exit(0)
			else:
				log_print( "Please input the name of a node you want to check.\n" + __doc__ % {'scriptName': sys.argv[0].split(os.sep)[-1]}, "INFO " )	
				exit(1)	
		
		
3) use getopt
	syntax:	
		getopt.getopt(args, options, [long_options])
		=> output:
			(options, values):	with options in either short format (ex. -i) or long format (ex. --inputFile).
			arguments:			args which are not in (options, values).
		
		#!/usr/bin/python
		
		import sys, getopt
		
		def main(argv):
			inputfile = ''
			outputfile = ''
			try:
				opts, args = getopt.getopt(argv,"hi:o:",["ifile=","ofile="])
			except getopt.GetoptError:
				print 'test.py -i <inputfile> -o <outputfile>'
				sys.exit(2)
			for opt, arg in opts:
				if opt == '-h':
					print 'test.py -i <inputfile> -o <outputfile>'
					sys.exit()
				elif opt in ("-i", "--ifile"):
					inputfile = arg
				elif opt in ("-o", "--ofile"):
					outputfile = arg
			print 'Input file is "', inputfile
			print 'Output file is "', outputfile
			
		if __name__ == "__main__":
			main(sys.argv[1:])
	
4) use argparse
	import argparse
	parser = argparse.ArgumentParser()
	parser.add_argument(...)
	args = parser.parse_args()
	...

	4.1) how to use paired --no-sth/--sth arguments

		parser = argparse.ArgumentParser()
		exclusive_grp = parser.add_mutually_exclusive_group()
		exclusive_grp.add_argument('--foo', action='store_true', help='do foo')
		exclusive_grp.add_argument('--no-foo', action='store_true', help='do not do foo')
		args = parser.parse_args()
		
		print 'Starting program', 'with' if args.foo else 'without', 'foo'
		print 'Starting program', 'with' if args.no_foo else 'without', 'no_foo'

	4.2) how to print help message for this script

		parser = argparse.ArgumentParser()
		try:
			options = parser.parse_args()
		except:
			parser.print_help()
			sys.exit(0)

	4.3) class argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, 
								prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, 
								conflict_handler='error', add_help=True)
			
	4.4) how to pass a list as option
		parser = ArgumentParser()
		parser.add_argument('-l', '--list', help='delimited list input', type=str)
		args = parser.parse_args()
		my_list = [int(item) for item in args.list.split(',')]
		
		Then,
			python test.py -l "265340,268738,270774,270817" [other arguments]
		or,
			python test.py -l 265340,268738,270774,270817 [other arguments]

			
# ref:	https://stackoverflow.com/questions/9234258/in-python-argparse-is-it-possible-to-have-paired-no-something-something-arg
# ref:	https://stackoverflow.com/questions/4042452/display-help-message-with-python-argparse-when-script-is-called-without-any-argu
# ref:	https://docs.python.org/2/library/argparse.html
# ref:	https://stackoverflow.com/questions/15753701/argparse-option-for-passing-a-list-as-option
# ref doc: http://www.tutorialspoint.com/python/python_command_line_arguments.htm



# ref doc: http://www.tutorialspoint.com/python/python_command_line_arguments.htm



