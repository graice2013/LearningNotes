
# what is REST and how to implement REST in Python
#
1) what is REST
  1.1)  "REST这个词，是Roy Thomas Fielding在他2000年的博士论文中提出的。"
    "the impact of various design choices on system behavior and
    changing the interaction style of an application can have more impact on performance than ..."
    
    ""本文研究计算机科学两大前沿----软件和网络----的交叉点。
    长期以来，软件研究主要关注软件设计的分类、设计方法的演化，很少客观地评估不同的设计选择对系统行为的影响。
    而相反地，网络研究主要关注系统之间通信行为的细节、如何改进特定通信机制的表现，常常忽视了一个事实，那就是改变应用程序的互动风格比改变互动协议，
    对整体表现有更大的影响。
    我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。"
    (This dissertation explores a junction on the frontiers of two research disciplines in computer science: 
        software and networking. 
    Software research has long been concerned with the categorization of software designs and 
        the development of design methodologies, but has rarely been able to objectively evaluate 
        the impact of various design choices on system behavior. 
    Networking research, in contrast, is focused on the details of generic communication behavior 
        between systems and improving the performance of particular communication techniques, 
        often ignoring the fact that changing the interaction style of an application can have more impact on performance
        than the communication protocols used for that interaction. 
    My work is motivated by the desire to understand and evaluate the architectural design of network-based application software
        through principled use of architectural constraints, 
    thereby obtaining the functional, performance, and social properties desired of an architecture. )"
    
  1.2)  '总结一下什么是RESTful架构：
　　  （1）每一个URI代表一种资源；
　　  （2）客户端和服务器之间，传递这种资源的某种表现层；
　　  （3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现"表现层状态转化"。
  
    "URI应该只代表"资源"的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对"表现层"的描述"
    
  1.3)  "通信协议用 HTTPS；尽量将API部署在专有域名之下；路径用名词（路径又称"终点"（endpoint），表示API的具体网址）；
    HTTP动词：GET，POST，PUT，DELETE，PATCH，HEAD，OPTIONS；用参数过滤信息，如 ?key1=value1&...；
    服务器返回状态码和提示信息；如果状态码是4xx，应该返回出错信息（如{error: "Invalid API key"}；
    服务器返回的结果应该符合规范；
    RESTful API 最好做到 Hypermedia（即返回结果中提供link，带有href，连向其他API方法，使用户不查文档也知道下一步做什么）；
    （1）API的身份认证应该使用OAuth 2.0框架。
    （2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。
    
    ex. https://api.example.com
        状态码：        https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
        返回结果：       GET /collection：返回资源对象的列表（数组）
                        GET /collection/resource：返回单个资源对象
                        ......
        Hypermedia：     {"link": {
                                    "rel":   "collection https://www.example.com/zoos",
                                    "href":  "https://api.example.com/zoos",
                                    "title": "List of zoos",
                                    "type":  "application/vnd.yourformat+json"
                                  }}
        "Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计."
        HATEOAS = Hypermedia As The Engine Of Application State, “超文本驱动”又名“将超媒体作为应用状态的引擎”
            "The media types used for these representations, 
            and the link relations they may contain, are standardized. 
            The client transitions through application states 
                by selecting from the links within a representation 
                or by manipulating the representation in other ways afforded by its media type. 
            In this way, RESTful interaction is driven by hypermedia."
            
            https://en.wikipedia.org/wiki/HATEOAS
            
  1.4) REST架构风格最重要的架构约束有6个：
        客户-服务器（Client-Server）
            通信只能由客户端单方面发起，表现为请求-响应的形式。
        无状态（Stateless）
            通信的会话状态（Session State）应该全部由客户端负责维护。 
        缓存（Cache）
            响应内容可以在通信链的某处被缓存，以改善网络效率。服务器必须明示客户端请求能否缓存。
        统一接口（Uniform Interface）
            通信链的组件之间通过统一的接口相互通信，以提高交互的可见性。
        分层系统（Layered System）
            通过限制组件的行为（即，每个组件只能“看到”与其交互的紧邻层），将架构分解为若干等级的层。
            譬如用中间层代替服务器做出响应的时候，客户端不需要做任何变动。
        按需代码（Code-On-Demand，可选）
            支持通过下载并执行一些代码（例如Java Applet、Flash或JavaScript），对客户端的功能进行扩展。
            这个约束是唯一一个是可选的。

    
2) implement REST in python
    用 flask 实现 REST：
        flask需要把数据库资源通过json的形式提供出去, 所以需要在数据库Model中定义to_json方法, 
            以json的形式表示数据库数据;
        或者用 flask 的 jsonify() 函数。
        flask需要接受客户端发送的json数据从而用于创建资源,所以需要在数据库Model中定义from_json方法;
        或者用 flask 的 request.json.get() 函数。

        => flask编写API的核心思想就是以json的方式表示和接收资源并将相应操作映射到http方法上从而操纵资源.

    2.1) use Flask, Flask-HTTPAuth 
         if needed, also flask_sqlalchemy, passlib.apps, itsdangerous

        pip install flask, flask-httpauth

        flask-httpauth 是Flask extension，可以进行RESTful web service的安全认证。有 BASIC 和 DIGEST 两种方式。
        在一个常规的web应用中，应该有登录表单提交去认证，同时服务器会创建一个会话过程去进行通讯。
            这个会话过程id会被存储在客户端的cookie里面。
        不过 RESTful web service 中，这样就违反了我们REST中无状态的规则，因此，我们需要客户端每次都将他们的认证信息发送到服务器。
        如果访问需要验证的接口，
            1) 客户端请求必需每次都发送用户名和密码;
            2) 使用Token认证请求。
                原理是第一次客户端与服务器交换过认证信息后得到一个认证token，后面的请求就使用这个token进行请求。
                而且 Token 通常会给一个过期的时间。
        
                好多种办法去实现token。
                一种简单的做法就是产生一个固定长度的随机序列字符与用户名和密码一同存储在数据库当中，有可能带上一个过期时间。
                    这样token就变成了一串普通的字符，可以十分容易地和其它字符串验证对比，并且可以检查时间是否过期。
                更复杂的实现办法是不需要服务器端进行存储token，而是使用数字签名信息作为token。
                    这样做的好处是经过用户数字签名生成的token是可以防篡改的。
                Flask使用与数字签名有些相似的办法去实现加密的cookies的，这里我们使用itsdangerous的库去实现。

    
    Example 1:
        编写一个待办事项应用程序而且我们想要为它设计一个 web service。
        根URL： http://[hostname]/todo/api/v1.0/
        => 需要的任务资源要使用的 HTTP 方法如下:
            ============ ==================================================== ========================
            HTTP Method     URL                                                     Action
            ============ ==================================================== ========================
            GET             http://[hostname]/todo/api/v1.0/tasks                 检索任务列表
            GET             http://[hostname]/todo/api/v1.0/tasks/[task_id]       检索任务列表
            POST            http://[hostname]/todo/api/v1.0/tasks                 创建新任务
            PUT             http://[hostname]/todo/api/v1.0/tasks/[task_id]       更新任务
            DELETE          http://[hostname]/todo/api/v1.0/tasks/[task_id]       删除任务
            ============ ==================================================== ========================

            我们定义的任务有如下一些属性:
            id: 任务的唯一标识符。数字类型。
            title: 简短的任务描述。字符串类型。
            description: 具体的任务描述。文本类型。
            done: 任务完成的状态。布尔值。

            
        from flask import Flask, make_response, abort, url_for, request, jsonify
        from flask_httpauth import HTTPBasicAuth

        app = Flask(__name__)
        auth = HTTPBasicAuth()

        @auth.get_password
        def get_password(username):
            ...

        @auth.error_handler
        def unauthorized():
            ...

        @app.route('/todo/api/v1.0/tasks', methods=['GET'])
        @auth.login_required
        def get_tasks():
            return jsonify({'tasks': map(make_public_task, tasks)})

        def make_public_task(task):
            new_task = {}
            for field in task:
                if field == 'id':
                    new_task['uri'] = url_for('get_task', task_id=task['id'], _external=True)
                else:
                    new_task[field] = task[field]
            return new_task

        @app.route('/todo/api/v1.0/tasks/<int:task_id>', methods=['GET'])
        def get_task(task_id):
            task = filter(lambda t: t['id'] == task_id, tasks)
            if len(task) == 0:
                abort(404)
            return jsonify({'task': task[0])
        ...

        if __name__ == '__main__':
            app.run(debug=True)
        
    Example 2:
        一个带 token 认证的创建用户、访问用户、访问token的 RESTful Web Service

    Data：
        User 存储在 sqlite3 中，用 SQLAlchemy 存取。
        User class 的变量id, username, password_hash.
            Password 用passlib.apps custom_app_context 加密（取sha256_encrypt).
        RESTful API访问用用户名和密码验证： flask_httpauth HTTPBasicAuth @auth.login_required, @auth.verify_password（回调函数），
            或者用token（token 实现为一次解码检索里面的用户id。）: 用 itsdangerous 的 TimedJSONWebSignatureSerializer 来加密 id 用作token。
        RESTful API:
            ============ ==================================================== ========================
            HTTP Method     URL                                                     Action
            ============ ==================================================== ========================
            POST            /api/users                                          create a new user
            GET             /api/users/<int:id>                                 get a user
            GET             /api/token                                          get token of a user (g.user)
            GET             /api/resource                                       print Hello from a user (g.user)
            ============ ==================================================== ========================

        import os
        from flask import Flask, abort, request, make_response, url_for, jsonify, g
        from flask_httpauth import HTTPBasicAuth
        from passlib.apps import custom_app_context as pwd_context
        from flask_sqlalchemy import SQLAlchemy
        from itsdangerous import (TimedJSONWebSignatureSerializer as Serializer,
                                    BadSignature, SignatureExpired)

        # initialization
        app = Flask(__name__)
        app.config['SECRET_Key'] = 'the quick brown fox jumps over the lazy dog'
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite'
        app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN'] = True
        # extension
        db = SQLAlchemy(app)
        auth = HTTPBasicAuth()

        # classes
        class User(db.Model):
            __tablename__ = 'users'
            id = db.Column(db.Integer, primary_key=True)
            username = db.Column(db.String(32), index=True)
            ...

            def hash_password(self, password):
                self.password_hash = pwd_context.encrypt(password)
            def verify_password(self, password):
                ...
            def generate_auth_token(self):
                ...
            @staticmethod
            def verify_auth_token(token):
                ...

        # functions
        @auth.verify_password
        def verify_password(username_or_token, password):
            ...

        @app.route('/api/users', methods=['POST'])
        def new_user():
            ...

        @app.route('/api/user/<int:id>')
        def get_user(id):
            ...

        @app.route('/api/token')
        @auth.login_required
        def get_token():
            ...

        @app.route('/api/resource')
        @auth.login_required
        def get_resource():
            ...

        # main entry
        if __name__ == '__main__':
            if not os.path.exists('db.sqlite'):
                db.create_all()
            app.run(debug=True)



    2.2) use Flask-RESTful, Flask-HttpAuth

        pip install flask-restful
        "Flask-RESTful 是一个可以简化 APIs 的构建的 Flask 扩展。"

         Flask 可以用视图函数来定义所有的路由;
         Flask 也可以用 blueprint 模块化，每个 Blueprint 中定义各自的视图函数进行路由；
         Flask-RESTful 提供了一个 Resource 基础类，它能够定义一个给定 URL 的一个或者多个 HTTP 方法。
            Api 类的 add_resource 函数使用指定的 endpoint 注册路由到框架上。

         Flask-RESTful 会自动地处理转换成 JSON 数据格式, 不需要使用 jsonify 函数。
                       fields.Url, marshal 不仅仅能够把 id 转成 uri 并且能够转换其他的参数.
                       因为 Resouce 类是继承自 Flask 的 MethodView，它能够通过定义 decorators 变量
                            并且把装饰器赋予给它进行认证。
                       reqparse 的 RequestParser 类可以进行数据验证，类似命令行解析工具 argparse。

        from flask import Flask
        from flask_restful import Api, Resource, fields, marshal, regparse
        from flask_httpauth import HTTPBasicAuth

        app = Flask(__name__)
        api = Api(app)

        task_fields = {
            'title': fields.String,
            'description': fields.String,
            'done': fields.Boolean,
            'uri': fields.Url(endpoint1)    # ex. 'task'
        }

        auth = HTTPBasicAuth()
        # ...
        class TaskListAPI(Resource):
        # ...

        class TaskAPI(Resource):
            # ...
            decorators = [auth.login_required]
            # ...
            def __init__(self):
                self.reqparse = regparse.RequestParser()
                self.reqparse.add_argument('title', type=str, location='json')
                self.reqparse.add_argument('description', type=str, location='json')
                self.reqparse.add_argument('done', type=bool, location='json')
                super(TaskAPI, self).__init__()
            # ...
            def put(self, id):
                task = filter(lambda t: t['id'] == id, tasks)
                if len(task) == 0:
                    abort(404)
                task = task[0]
                args = self.reqparse.parse_args()
                for k, v in args.iteritems():
                    if v is not None:
                        task[k] = v
                return {'task': marshal(task, task_fields)} # task_fields作为 marshal 函数的模板

        api.add_resource(TaskListAPI, '/todo/api/v1.0/tasks', endpoint='tasks')
        api.add_resouce(TaskAPI, '/todo/api/v1.0/tasks/<int:id>', endpoint='task')



# ref:  理解RESTful架构         http://www.ruanyifeng.com/blog/2011/09/restful.html
# ref:  RESTful API 设计指南    http://www.ruanyifeng.com/blog/2014/05/restful_api.html
# ref:  理解本真的REST架构风格    http://www.infoq.com/cn/articles/understanding-restful-style/
# ref:  使用 Flask 设计 RESTful APIs    http://www.pythondoc.com/flask-restful/index.html
# ref:  Python Restful API 资料整理     http://blog.csdn.net/lihe2008125/article/details/60806760
# ref:  使用python的Flask实现一个RESTful API服务器端[翻译]  http://www.cnblogs.com/vovlie/p/4178077.html
# ref:  使用Flask设计带认证token的RESTful API接口[翻译]     http://www.cnblogs.com/vovlie/p/4182814.html
# ref:  REST-auth example   https://github.com/miguelgrinberg/REST-auth/blob/master/api.py
# ref:  Flask编写API的核心思想  https://segmentfault.com/a/1190000004467187
# ref:  Flask Restful User's Guide  http://flask-restful.readthedocs.io/en/latest/ 
# ref:  使用 Flask-RESTful 设计 RESTful API http://www.pythondoc.com/flask-restful/second.html
# ref:  如何理解flask中的蓝本？ https://www.zhihu.com/question/31748237
