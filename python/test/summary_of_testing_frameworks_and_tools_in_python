#
# summary of testing frameworks and tools in python
#
1)  unit test framework:    unittest, nose, pytest etc.
    extension:              
        "testresources          - 提供了多用例间管理测试数据的机制，兼容unittest"
        "HTMLTestRunner         - Python 标准库unittest的扩展. 生成简单好用的html报告
                                    http://tungwaiyip.info/software/HTMLTestRunner.html
                                
         unittest-xml-reporting - 一个unittest test runner可以将测试结果保存到 XML文件。可高度定制"
                                    https://github.com/xmlrunner/unittest-xml-reporting
                                    

2) web ui test automation framework:   
        "py.saunter - 有主见的自动化测试框架，使用了selenium RC和webdriver api
        wtframework - 让web测试可以配置的框架
        robotframework-selenium2library - Robot Framework的selenium扩展
        robotframework-anywherelibrary - Robot Framework的扩展库，
            使用selenium2测试web应用，使用appium测试移动应用
        robotframework-pageobjects - 一个不错的Page Object实现，可以脱离robot framework单独使用。"
        
    extensions:
        "Selenium-Requests - 扩展 Selenium WebDriver类，包含了Requests库的一些功能，
                             可以更方便的处理cookie和请求头
         selenium-respectful - selenium的封装，可以并行访问站点"
         
3) Windows ui test automation:
    "Winium.Desktop - 测试Windows应用(主要是基于WinForms和WPF平台)的自动化测试工具. 
                      实现了Selenium Remote WebDriver协议
    PyAutoGUI - 跨平台的GUI测试工具，支持通过python脚本控制键盘和鼠标
    pywinauto - 非常有python面向对象风格的GUI测试库，现已支持64位机器以及py2和py3
    SikuliX - 基于OpenCV的 GUI 测试框架, 使用图片识别技术，支持python2.7"

4) Unix / Linux ui test automation
    "ldtp - 跨平台的linux GUI测试项目
     SikuliX - 基于OpenCV的 GUI 测试框架, 使用图片识别技术，支持python2.7"
     
5) MacOS ui test automation
    "ATOMac - 通过Apple Accessibility API来测试Mac应用的python库
     PyAutoGUI - 跨平台的GUI测试工具，支持通过python脚本控制键盘和鼠标
     SikuliX - 基于OpenCV的 GUI 测试框架, 使用图片识别技术，支持python2.7"

6) BDD, ATDD framework
    "behave - BDD 框架
     lettuce - 又一个BDD框架
        lettuce-tools - 一整套lettuce扩展，让BDD更加简单"
        
     "robotframework - 最有名的acceptance test-driven development (ATDD)测试框架
        awesome-robotframework - 各种rf的扩展库"
        
7) Mocking
    "mock - python实现的Mocking和Patching库,
            'provides a core Mock class, a MagicMock class, a patch() decorator removing the need to 
                create a host of stubs throughout your test suite. 
             Mock and MagicMock objects create all attributes and methods as you access them 
                and store details of how they have been used. 
             You can configure them, to specify return values or limit what attributes are available,
                and then make assertions about how they have been used, about which methods / attributes were used 
                and arguments they were called with. 
             Mocks are callable and create attributes as new mocks when you access them.
             MagicMock is a subclass of Mock with all the magic methods pre-created and ready to use.
             mock provides a patch() decorator that handles patching module and class level attributes within the scope of a test, 
                along with sentinel for creating unique objects.


     responses - mock requests library的Python测试工具库 
     pretenders - 测试用的fake server,
                  Pretenders currently supports the mocking of HTTP and SMTP servers.

     mock-server - 简单的mock sever，支持REST and XML-RPC API，还有基于tornado的管理界面"

    mock example:          https://docs.python.org/dev/library/unittest.mock.html#quick-guide
    pretenders example:    http://pretenders.readthedocs.io/en/latest/
    
 8) Fuzzing 模糊测试
    Fuzzing:    "provides invalid, unexpected, or random data as inputs 
                to monitor for exceptions such as crashes, or failing built-in code assertions 
                or for finding potential memory leaks."
    
    In 1991, the crashme tool was released, which was intended to 
        test the robustness of Unix and Unix-like operating systems
        by executing random machine instructions.
        
        crashme [+]<nbytes>[.inc] <srand> <ntrys> [nsub] [verbose]
        $ crashme +2000 666 50 00:30:00 2
            *** set a breakpoint in malloc_error_break to debug
            malloc: Cannot allocate memory
            ......
            Time limit reached after run 82
            Test complete, total real time: 1916 seconds (0 00:31:56)
            exit status ... number of cases
                     11 ...     6
                      9 ...     2
                      0 ...     6
                      4 ...    68
            
            Number of distinct cases = 4

        http://people.delphiforums.com/gjc/crashme.html
        
    Hypothesis:     Hypothesis combines unit testing and fuzz testing by letting you write tests 
                        parametrized by random data matching some specification. 
                    It then finds and minimizes examples that make your tests fail.

9) Performance & Stress & Load Testing
    "最常见的工具有Apache Benchmark俗称ab和商用工具LoadRunner。
    ab简单直接，功能也相对较弱;
    LoadRunner功能也确实很强大，其价格也确实很High"
    
    "Multi-Mechanize        - 开源的性能测试框架
        
        pip install multi-mechanize
            https://github.com/cgoldberg/multi-mechanize
            https://github.com/cgoldberg/multi-mechanize/blob/master/examples/config.cfg
    
        multimech-newproject my_project
        multimech-run my_project
        in my_project:
            test_scripts/*.py
            config.cfg
        "按multi-mechanize的默认规则，每个脚本必须有一个Transaction的类，
                                    类要有一个run方法，在run里面写测试业务逻辑。"
        "单个脚本多个测试用例的支持: like testsuite, however, implement it by self, ex.
            in base.py:
                class BaseTransaction(object):
                    _TEST_CASE_PREFIX = 'test_'
                    
                    def __init__(self):
                        self._init()
                        self.custom_timers = {}
                        self.browser = mechanize.Browser()
                        ...
                    def _init(self):
                        self.funcs = []
                        funcs_ = dir(self)
                        for func_ in funcs_:
                            if func_.startswith(self._TEST_CASE_PREFIX):
                                self.funcs.append(func_)
                     def run(self):
                        try:
                            for func in self.funcs:
                                ...
                         except Exception as e:
                            ...
        
                in test_case_google.py:
                    from base import BaseTransaction
                    class Transaction(BaseTransaction):
                        def test_google_com_hk(self):
                            pass
                        ...
                        
            "真实的并发量计算：multi-mechanize使用了multiprocessing库，会同时起多个进程，且每个进程按config里的配置起多个线程来实现并发测试，
                            但真正的单位时间内的并发量并不是config里设置threads=10这样的表示每秒10个并发，
                            真实的并发量需要根据最终完成的transaction数和这些transaction里面包含多少次http请求和总的完成时间来计算得知，
                            这点不是很直观。"
            "自定义统计数据：你可以往self.custom_timers这个内建的字典里塞任意的自定义统计数据，他们在报表中都能够得到体现。"
            
            https://github.com/cgoldberg/multi-mechanize/blob/master/examples/test_scripts
    
    
    locust                  - 可扩展的python性能测试工具, based on gevent under linux family system.
    
        use it better on linux.
        if using it on Mac, need to install libev:
            libev (dependency for gevent)
        pip install locustio
            https://docs.locust.io/en/latest/quickstart.html
            
            
    pytest-benchmark        - py.test的benchmark工具
    Tsung                   - 开源，支持多协议的分布式性能测试工具. 
                                可以测试 HTTP, WebDAV, SOAP, PostgreSQL, MySQL, LDAP 和 Jabber/XMPP 服务."
                                
        "tsung是用erlang开发的一款简单易用的分布式压力测试工具，可以生成成千上万的用户模拟对服务器进行访问。"
        依赖ncurses-devel(erlang运行环境), erlang, tsung.
        "test cases and configurations could be written into tsung.xml.
        一般在测试时，需要关注clients,servers,load,options,sessions这几个标签:
            clients 标签配置tsung集群的信息;
            server 标签配置被压测服务的信息。
            load 标签下配置tsung启动虚拟用户的方式;
            options 标签配置访问url使用的全局配置，如request间的thinkTime，tcp的buff size，http agent等。
            sessions 标签配置具体请求的权重等信息.
        启动tsung:
            tsung start
            tsung -f myfile.xml start
            查看tsung运行时状态： http://tsungIP:8091
        "
        
        # ref:  单机百万并发的性能压测工具 Tsung 介绍 
            http://www.51testing.com/index.php?action-viewnews-itemid-3720564-php-1
                                
    FunkLoad                - Web 功能和负载测试. 该工具允许加载多功能的Web应用测试组件.
        "A FunkLoad test is made of a typical unittest and a configuration file."
        
        taking installing FunkLoad on CentOS as an example:
        as root:
            # install python etc.
            yum install python-setuptools python-docutils gnuplot python-devel make
            # install easy_install 
            ...
            # install tcpwatch, 
                # 'a utility written in Python that lets you monitor forwarded TCP connections or HTTP proxy connections. '
                # https://pypi.python.org/pypi/tcpwatch/
            wget http://funkload.nuxeo.org/3dparty/tcpwatch-1.3.tar.gz
            tar xzvf tcpwatch-1.3.tar.gz
            cd tcpwatch
            python setup.py install
            # install webunit
            easy_install webunit
            # install the latest stable FunkLoad
            easy_install -f http://funkload.nuxeo.org/snapshots/ -U funkload
            
        testing FunkLoad
            fl-install-demo
            cd funkload-demo/xmlrpc/
            make test
            make bench
            
        example:
            simple.con:
                [main]
                title=.../description=...
                url=http://baidu.com
                
                [test_simple]   # a section for each test
                description=Access %(nb_time)s times the main url
                nb_time=120
                
                [ftest] # a section to configure the test mode
                log_to = console file
                ...
                
                [bench] # a section to configure the bench mode
                cycles = 50:75:100:125
                ...
                
            simple.py:
                import unittest
                from funkload.FunkLoadTestCase import FunkLoadTestCase
                
                class Simple(FunkLoadTestCase):
                    def setUp(self):
                        self.server_url = self.conf_get('main', 'url')
                        
                    def test_simple(self):
                        server_url = self.server_url
                        nb_time = self.conf_getInt('test_simple', 'nb_time')
                        for i in range(nb_time):
                            self.get(server_url, description='Get url')
                            
                if __name__ in ('main', '__main__'):
                    unittest.main()
                 
             sudo -s fl-run-test -dv simple.py
             
             
        
        # ref:  哪些 Python 库让你相见恨晚   https://www.zhihu.com/question/24590883
        # ref:  First Steps with FunkLoad  http://funkload.nuxeo.org/tutorial.html
        # ref:  funkload 安装  http://www.51testing.com/html/71/410671-829541.html
        
        

# ref:  收藏清单: 一步到位, python自动化测试工具最全资源汇总 https://zhuanlan.zhihu.com/p/30385931
# ref:  PythonTestingToolsTaxonomy  https://wiki.python.org/moin/PythonTestingToolsTaxonomy
# ref:  收藏清单: python测试框架最全资源汇总  https://zhuanlan.zhihu.com/p/29960594
# ref:  Fuzzing https://en.wikipedia.org/wiki/Fuzzing
# ref:  收藏清单: python持续集成测试报告及其他最全资源汇总   https://zhuanlan.zhihu.com/p/31059318
# ref:  收藏清单: python安全测试API测试及性能测试最全资源汇总(接口和性能测试看过来)    https://zhuanlan.zhihu.com/p/30543853
# ref:  Python Web 性能和压力测试 multi-mechanize  https://www.topjishu.com/5318.html
# ref:  浅谈服务器性能测试的全生命周期——从测试、结果分析到优化策略  http://wetest.qq.com/lab/view/?id=102
