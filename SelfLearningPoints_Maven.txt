Self-Learning Points of Maven

1.	What is Maven
1)	A build tool, dependency management tool and project information management tool.
作为Apache组织中的一个颇为成功的开源项目，Maven主要服务于基于Java平台的项目构建、依赖管理和项目信息管理。
构建：编译、运行单元测试、生成文档、打包和部署等等。


2)	Characteristics
•	Convention over Configuration
•	Cross-platform
•	Developed in Java, having a huge central repository of free plugins.
提供了中央库，能帮我们自动下载构件。

•	Actions done in plugins
抽象了一个完整的构建生命周期模型
能帮助我们标准化构建过程

3)	Advantage
工具	优点	缺点
Make	由一个名为Makefile的脚本文件驱动。Make语法的基本组成部分为一系列规则。Makefile的基本结构：
TARGET: PREREQUISITE
COMMAND
	和操作系统绑定在一起了。
Ant (Another Neat Tool)	作者JamesDuncan Davidson，最早用来构建著名的Tomcat。
可以将Ant看作是一个Java版本的Make。跨平台。
格式如build.xml:
<?xml version=”1.0”?>
<project name=”Hello” default=”compile”>
<target name=”compile” description=”…”>
    <mkdir dir=”classname”/>
    <javac srcdir=”.” Destdir=”classes”/>
</target>
…	Make, Ant都是过程式的，必须显式指定每个目标，以及完成这个目标需要执行的任务。重复。
Ant没有依赖管理。


Maven	从Maven2.0.9开始，所有核心的插件都设定了稳定版本。

Maven是声明式的，项目构建过程和过程中各个阶段所需的工作都由插件实现。
	

4)	Disadvantage
见上图。

5)	Difference between Maven Core and Maven Plugins
当你下载Maven的时候，你得到的是一个包含了基本躯壳的Maven核心，它知道如何解析命令行，管理classpath，解析POM文件，在需要的时候下载Maven插件。

This is our first brush with convention over configuration.
这是我们对于约定优于配置(convention over configuration)的第一笔。

通过保持Compiler插件和Maven核心分离，并且提供更新机制，用户很容易能使用编译器最新的版本。通过这种方式，Maven插件提供了通用构建逻辑的全局重用性.

6)	Difference between tag “plugins” and “pluginManagement” in pom.xml
Ref doc:  https://maven.apache.org/pom.html 
Tag name	Same points	Difference
plugins	Both under project/build/	Setting is taken by this pom; if taken by inheriting poms is determined by “<inherited>true/false</inherited>” tag of each plugin.

maven会在当前项目中加载plugins声明的插件.

pluginManagement		Settings is taken by this pom and all inheriting poms.
Only for plugins which are already bound into maven? Jetty is embedded in maven.

pluginManagement是表示插件声明，即你在项目中的pluginManagement下声明了插件，maven不会加载该插件，pluginManagement声明可以被继承。


Similar is the difference between “dependencies” and “dependencyManagement”.


7)	Transitive Dependency (传递性依赖)
Maven同时下载构件和POM文件的这种行为，对Maven支持传递性依赖来说非常重要。
在Maven中一个依赖不仅仅是一个JAR。它是一个POM文件，这个POM可能也声明了对其它构件的依赖。这些依赖的依赖叫做传递性依赖，Maven仓库不仅仅存贮二进制文件，也存储了这些构建的元数据（metadata），才使传递性依赖成为可能。

Maven也提供了不同的依赖范围(dependency scope)。
例如，当一个依赖的范围是test的时候，说明它在Compiler插件运行compile目标的时候是不可用的。它只有在运行compiler:testCompile和surefire:test目标的时候才会被加入到classpath中。
当为项目创建JAR文件的时候，它的依赖不会被捆绑在生成的构件中，他们只是用来编
译。
当用Maven来创建WAR或者EAR，
你可以配置Maven让它在生成的构件中捆绑依赖，
你也可以配置Maven，使用provided范围，让它排除WAR文件中特定的依赖。provided范围告诉Maven一个依赖在编译的时候需要，但是它不应该被捆绑在构建的输出中。
当你开发web应用的时候provided范围变得十分有用，你需要通过Servlet API来编译你的代码，但是你不希望Servlet API的JAR文件包含在你web应用的WEB-INF/lib目录中。

小结：
依赖性传递两点:
i.	项目A依赖于项目B和C，项目B依赖于项目D，项目C依赖于项目E，但是项目A所需要做的只是定义对B和C的依赖。

ii.	Maven同时也提供了一种机制，能让你排除一些你不想要的传递性依赖。利用依赖范围（dependency scope） 和/或 provided范围。

8)	Meaning of jar, war, ear
Ref doc:
http://m.blog.csdn.net/blog/cailiang517502214/4711881 
Name	Description	Contents	Deployment Files	Inheritance
jar

	java archive

封装类
	jar是class,properties文件，是文件封装的最小单元	application-client.xml 	jar文件可以将ejb包含其中。
jar表示java的标准档案文件，有一个有趣的双关语：
      a jar of beans (一罐豆子)。

war
	web archive

封装web站点	war是servlet、jsp页面、jsp标记库、jar库文件、html/xml文档和其他公用资源文件，如图片、音频文件等	web.xml            	war可以将web组件包含其中。   
ear

	enterprise archive


封装ejb
	ear是除了包含jar、war以外，还包括ejb组件。
ejb = entprise java bean   	application.xml   	ear中可以包含war,jar文件。

 
2.	Java Modules
1)	Jaxen
I.	Jaxen是一个Java编写的开源的XPath库。这是适应多种不同的对象模型，包括DOM，XOM，dom4j和JDOM。也可以作为适配器，转换Java字节代码或XML的Java bean为xml，从而使您可以使用XPath查询这些树了.

II.	Relationship between DOM4J and Jaxen
仅操作XML文档的话, dom4j OK.
如果需要使用XPath的话,还需要jaxen.

Ref doc: 
Module	Reference
Log4j	http://blog.csdn.net/anlina_1984/article/details/5313023/ 
http://blog.chinaunix.net/uid-84860-id-2031097.html


III.	Advantage and Disadvantage between DOM, SAX, JDOM and DOM4J

DOM,SAX,JDOM,DOM4J优缺点比较及生产xml和解析xml 

	Basics	Advantage	Disadvantage	Usage Scenario
DOM	解析器读入整个文档，然后构建一个驻留内存的树结构，使用 DOM 接口来操作这个树结构。	整个文档树在内存中，便于操作；

支持删除、修改、重新排列等多种功能；

访问效率高。	将整个文档调入内存（包括无用的节点），浪费时间和空间；	一旦解析了文档还需多次访问这些数据；

硬件资源充足（内存、CPU）
SAX	1、边读边解析，应用于大型XML文档
2、只支持读
3、访问效率低
4、顺序访问
			
JDOM		①是基于树的处理XML的Java API，把树加载在内存中
     ②没有向下兼容的限制，因此比DOM简单
     ③速度快，缺陷少
     ④具有SAX的JAVA规则	①不能处理大于内存的文档

②JDOM表示XML文档逻辑模型。不能保证每个字节真正变换。

③针对实例文档不提供DTD与模式的任何实际模型。

④不支持与DOM中相应遍历包
	JDOM具有树的便利，也有SAX的JAVA规则。在需要平衡时使用
DOM4J	DOM4J 是一个非常非常优秀的Java XML API，具有性能优异、功能强大和极端易用使用的特点，
同时它也是一个开放源代码的软件。
			

 
3.	POM Details
1)	Super pom
-	Simple pom
-	Effective pom
-	Final pom
2)	Attributes reference
Name	Description
env	环境变量
例如： ${env.PATH}

project	POM信息
例如： ${project.artifactId}

settings	Maven Settings
例如： ${settings.offline} from ~/.m2/settings.xml

java.lang.System	所有可以通过 java.lang.System 中 getProperties() 方法访问的属性都被暴露成POM属性。一些系统属性的例子是：hudson，/home/hudson，/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0/jre，和Linux。
一个完整的系统属性列表可以在java.lang.System类的Javadoc中找到。

x	通过pom.xml或者settings.xml中的properties元素设置自己的属
性，或者还可以使用外部载入的文件中属性。
例如：
  在POM中设置${foo}=bar的语法：
<properties>
<foo>bar</foo>
</properties>


3)	Dependency Scope 
Name	Description
compile	Default value.
编译范围依赖在所有的classpath中可用，同时它们也会被打包。

provided	只有在当JDK或者一个容器已提供该依赖之后才使用。
在编译classpath（不是运行时）可用。它们不是传递性的，也不会被打包。

runtime	在运行和测试系统的时候需要，但在编译的时候不需要。
比如，你可能在编译的时候只需要JDBC API JAR，而只有在运行的时候才需要JDBC驱动实现。

test	在一般的 编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。

system	与provided类似，但是你必须显式的提供一个对于本地系统中JAR文件的路径。这么做是为了允许基于本地对象编译，而这些对象是系统类库的一部分。
必须同时提供一个systemPath元素。不推荐使用。


4)	坐标
GAV
Classifier: 如果你的项目使用本地扩展类库，你可以使用分类器为每一个目标平台生成一个构件。

5)	POM Best Practice
i.	依赖归类
通过创建一个 packaging 为 pom 的 pom.xml。
ii.	多模块 vs. 继承
	多模块	继承
区别	是管理一组子模块。

每个模块的配置可能完全不同。
	所有的设置都从父传给子。

为了给一组逻辑关联的项目共享依赖和通用配置。



 
4.	优化和重构 POM：依赖和插件
1)	上移共同的依赖至dependencyManagement
父POM包含一个版本和一组排除配置，所有的子POM需要使用groupId和artifactId引用这个依赖。
如果依赖已经在dependencyManagement中列出，子项目可以忽略版本和排除配置。
2)	对紧密关联的依赖组件，定义版本号属性、然后引用这个版本号。
如hibernate-annotations和hibernate-commons-annotations都是JBoss发布的同一个项目的组件，当有新的版本发布的时候，两个依赖都会改变。
<properties>
<hibernate.annotations.version>3.3.0.ga</hibernate.annotations.version>
</properties>

3)	为兄弟项目使用内置的项目version和groupId
使用{project.version}和org.sonatype.mavenbook来引用兄弟项目。

4)	将共同的插件配置上移到元素顶层POM build元素下的pluginManagement元素。
5)	总是为你代码引用的类显式声明依赖。
可用 mvn dependency:analyze 和 mvn dependency:tree查看。

6)	定期运行 mvn dependency:analyze， 确保依赖优化。
7)	定期查看所有 POM 中的插件配置，确保优化。
Maven 2.x会在编译范围引入传递性依赖。
 
5.	生命周期 LifeCycle
1)	What is lifecycle?
i.	一个构建生命周期是一组精心组织的有序的阶段，
它的存在能使所有注册的目标变得有序运行。
这些目标根据项目的打包类型被选择并绑定。

ii.	Maven中有三种标准的生命周期：
•	clean
•	default ( = compile )
•	site

Name	Total Phrases
clean	3:
Pre-clean
Clean
Post-clean

default ( = compile )	21:
Validate
Generate-sources
Process-sources
Generate-resources
Process-resources
Compile
Process-classes
Generate-test-sources
Process-test-sources
Generate-test-resources
Process-test-resources
Test-compile
Test 
Prepare-package
Package
Pre-integration-test
Integration-test
Post-integration-test
Verify 
Install
Deploy 

site	4:
Pre-site
Site
Post-site
Site-deploy


iii.	Maven中有7种打包相关的生命周期：
•	jar
•	pom
•	maven plugin
•	ejb
•	war
•	ear
•	其它打包类型

生命周期阶段 和 目标 的对应:

Phase / Goal	Jar	Pom	Maven plugin	Ejb	War	Ear
Generate-resources	-	-	plugin:descriptor	-	-	ear:generate-application-xml
Process-resources	resources:resources	-	resources:resources	resources:resources	resources:resources	resources:resources
Compile	compiler:compile	-	compiler:compile	compiler:compile	compiler:compile	-
Process-test-resources	resources:testResources	-	resources:testResources	resources:testResources	resources:testResources	-
Test-compile	test:testCompile	-	test:testCompile	test:testCompile	test:testCompile	-
Test	surefire:test	-	surefire:test	surefire:test	surefire:test	-
Package	jar:jar	site:attach-descriptor	jar:jar plugin:addPluginArtifactMetadata
	ejb:ejb	war:war	ear:ear
Install 	install:install	install:install	install:install plugin:updateRegistry
	install:install	install:install	install:install
Deploy 	deploy:deploy	deploy:deply	deploy:deploy	deploy:deploy	deploy:deploy	deploy:deploy




6.	构建Profile
1)	What is profile for?
•	能让你为一个特殊的环境自定义一个特殊的构建
•	使得不同环境间构建的可移植性成为可能。
2)	Portability through maven profiles
i.	4 levels
Pom.xml
Profiles.xml
~/.m2/settings.xml
/usr/local/maven/conf/settings.xml

ii.	Definition of profile
<project…>
	<profiles>
		<profile>
			<id>dev</id>
			...
		</profile>
		<profile>
			<id>prod</id>
			...
		</profile>
	</profiles>
</project>

iii.	Definition of profile activation
<project…>
	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<jdk>1.5</jdk>
				<os>
					<name>Windows XP</name>
					<family>Windows</family>
					<arch>x86</arch>
					<version>5.1.2600</version>
				</os>
				<property>
					<name>mavenVersion</name>
					<value>2.0.5</value>
				</property>
				<file>
					<exists>file2.properties</exists>
					<missing>file1.properties</missing>
				</file>
			</activation>
			...
		</profile>
		<profile>
			<id>prod</id>
			...
		</profile>
	</profiles>
</project>

iv.	Profile activation and usage
•	Method1: 
define property ex. environment.type in settings.xml 
 and 
use it in pom.xml as activation criteria
<id>development</id>
<activation>
<property>
<name>environment.type</name>
<value>dev</value>
</property>
</activation>

•	Method2:
define profile
 and 
use it in mvn command
	mvn –P${profile_id}

v.	Checking active profiles
mvn help:active-profiles

vi.	Platform classifier
•	Can be used in maven assembly plugin and maven jar plugin.
•	Example:

<project>
...
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<classifier>${envClassifier}</classifier>
				</configuration>
			</plugin>
		</plugins>
	</build>
...
	<profiles>
		<profile>
			<id>windows</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<properties>
				<envClassifier>win</envClassifier>
			</properties>
		</profile>
		<profile>
			<id>linux</id>
			<activation>
			<os>
				<family>unix</family>
			</os>
			</activation>
			<properties>
				<envClassifier>linux</envClassifier>
			</properties>
		</profile>
	</profiles>
</project>

7.	Maven Plugin: Assembly
1)	What is an assembly?
•	An assembly is a group of files, directories and dependencies that are assembled into an archive format and distributed.
•	Currently 2 goals are used:
assembly:assembly
  and 
assembly:single

Goal	Description
assembly:assembly	是一个聚合mojo。
即：无论有多少个模块正被构建，该mojo在一个构件中最多被运行一次。

=》 只在命令行中运行，永远不要绑定到生命周期阶段中。因为有副作用：强迫 package 提前运行。

assembly:single	应该被绑定到生命周期的某个阶段。


•	Ref doc: http://maven.apache.org/plugins/maven-assembly-plugin/ 

2)	套件描述符 Assembly Descriptor
•	Maven assembly plugin relies on the provided assembly descriptors to dictate its execution.
套件描述符描述归档解决方案。

•	Maven Assembly插件预定义的4种套件描述符：bin, jar-with-dependencies, project, src.


Maven Assembly	Description
bin	生成二进制分发包。
包含主构建和LICENSE, README, NOTICE文件等。

jar-with-dependencies	生成一个自包含的，可运行的jar包。

project	生成一个解压缩后立刻能由maven构建的包。
包含整个项目目录结构。
忽略Target目录。

src	类似于project。
但是源文件和资源文件只能位于标准的src目录下，譬如src/main/java下。

3)	Building an assembly
•	Method 1: 	maven command to run assembly mojo:
mvn -DdescriptorId=project assembly:single

•	Method 2: 	define descriptorRef to assembly plugin, 
bind assembly mojo to ex. package phase in pom.xml
step1:
pom.xml:
<project>
...
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.2-beta-2</version>
				<executions>
					<execution>
						<id>create-executable-jar</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptorRefs>
								<descriptorRef>
									jar-with-dependencies
								</descriptorRef>
							</descriptorRefs>
							<archive>
								<manifest>
									<mainClass>org.sonatype.mavenbook.App</mainClass>
								</manifest>
							</archive>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>

Step2:
mvn package

8.	仓库管理器 Nexus
1)	核心的 Nexus 服务
•	实际上是一堆 REST 服务，你正使用的 UI 只是和这些 REST 服务交互以配置和查看 Nexus 的组及仓库。

2)	Nexus 的日志和配置文件
•	日志文件
nexus.log
nexus-rest-0.log
•	配置文件
nexus.xml
•	add a new repository into Nexus (for admin)
taking “caja” as an example.
Setting Item	Value	Notes
Repository ID	caja	
Repository Name	Google Caja	
Repository Type	proxy	
Format	maven2	
Repository Policy	Release	enumerated
Remote Storage Location	http://google-caja.googlecode.com/svn/maven  

Download Remote Indexes	True	enumerated
Checksum Policy	Warn	enumerated

•	Add a repository into a Nexus group (for admin)
Under Repository Groups,
	Click “Add” 
-> select the repository-to-be-added from “Available Repositories”
-> drag it into “Ordered Group Repositories”
-> “Save”. 


9.	编写插件 Maven Plugin
1)	What is IoC? DI?
•	反转控制：基本想法：将对象的创建和管理从代码中剥离，并将控制放到IoC框架手中。
•	在 Java 实现的 IoC 容器中，最重要的一个功能是称为依赖注入（DI）的机制。
•	Spring 是著名的开源IoC框架。
•	Maven的心脏是一个名为Plexus的反转控制（IoC）框架。是一个用来管理及关联组件的系统。
《= 在一个如 Plexus 的 IoC 容器中，
-	你负责通过简单的提供输入输出接口来声明组件之间的关系。
-	你不需要初始化对象， Plexus 会帮你完成；
-	你的应用程序的代码不用去管理组件的状态， Plexus 负责。

=》 当启动 Maven 的时候，实际上是启动 Plexus 来管理一个带有很多相互关联组件的系统。

•	在一个 Java IoC容器中，有三种方法将依赖值注入到一个组件对象中：
注入方法	属性	例子 (对 Person 类：)
构造器   	公共方法	Person(String name);                             
Set 方法	公共方法	使用无参构造函数， 然后 setName(String name);
字段注入	私有属性	person.Name = ***;

2)	Plexus 简介
•	Maven的心脏是一个名为Plexus的反转控制（IoC）框架。是一个用来管理及关联组件的系统。
《= 在一个如 Plexus 的 IoC 容器中，
-	你负责通过简单的提供输入输出接口来声明组件之间的关系。
-	你不需要初始化对象， Plexus 会帮你完成；
-	你的应用程序的代码不用去管理组件的状态， Plexus 负责。

=》 当启动 Maven 的时候，实际上是启动 Plexus 来管理一个带有很多相互关联组件的系统。

•	如何在 Plexus 中自定义组件
-	你的程序可以针对接口编程，
-	并通过配置 Plexus 来将正确的实现连接到正确的组件。
即：
-	编写独立的组件，
-	然后通过一个 XML 文件来配置组件应当如何被装配在一起。

•	配置文件 META-INF/plexus/components.xml.

•	Plexus 和 Maven 由同一个发明。Maven 被创建的时候， Spring 还不成熟。 Spring 项目的一部分由 Maven 构建。

3)	什么是Maven插件？
•	Maven插件就是包含了一个插件描述符和一个或多个Mojo的Maven构件。
•	一个Mojo可以认为是Maven 中的一个目标，每个Mojo对应着一个目标。
•	Mojo 的配置：
in META-INF/maven/plugin.xml, mojos -> mojo -> mojo settings:
Mojo 的配置元素	注释
goal	
description	
requiresDirectInvocation	如果是 true， 该目标只能在命令行执行。
requiresProject	默认为 true。目标需要一个带有 POM 的项目。
requiresReports	默认是false。
requiresOnline	如果依赖于网络资源，设为 true。
aggregator	不推荐使用。
inheritedByDefault	
phase	目标绑定到的阶段。
implementation	告诉 Maven 需要为该 Mojo 初始化什么类。
这是一个 Plexus 组件属性。

language	默认是 Java。
可以是 Groovy，Ruby 等。
instantiationStrategy	告诉 Plexus 如何创建和管理组件实例。
在 Maven 中， 所有 mojo 的 instantiationStrategy 都被配置成 per-lookup，每次 Maven 从 Plexus 中获取该 mojo 的时候，一个新的实例被创建。

这是一个 Plexus 组件属性。

executionStrategy	不推荐使用。
parameters
   name
   type
   required
   editable
   description
   configuration
   requirements
	描述 mojo 的所有参数。

editable = true, 该参数可以在 POM 中被重写。

configuration 提供默认值。包含 implementation 属性来指定参数的类型。其元素值即默认值，硬编码或者一个 Maven 属性引用。

requirements 定义对其它 Plexus 组件的依赖。



4)	什么是插件描述符？
•	Maven 插件包含了一个告诉 Maven 各种 Mojo 和插件配置的路线图，即插件描述符。
•	插件描述符位于 JAR 文件中的 META-INF/maven/plugin.xml.

<= 当 Maven 载入一个插件的时候，
-	它读取该 XML 文件，
-	初始化并配置插件对象，
-	使 Mojo 被保护在插件中，供 Maven 使用。

•	顶层插件描述符元素(5个)：
Plugin 元素中顶层配置元素	注释
Description	简短描述
GAV	坐标
goalPrefix	目标前缀。
默认值： ${prefix}-maven-plugin OR
         maven-${prefix}-plugin

inheritedByDefault	缺省继承
isolatedRealm	不推荐使用




10.	使用可选语言编写 Maven 插件
如用 Ant， Ruby， Groovy 来编写 Maven 插件。
1)	用 Ant 编写插件
•	什么是 Ant ?
-	Ant 是一种构建工具。
-	Ant 能让你通过一组归并成构建目标的任务来描述一个构建。
-	Ant 允许你声明不同构建目标之间的依赖。
=》 比如，使用 Ant 你实际上是在创建自己的生命周期。
对比： Maven 有高度可重用的构建插件。
               Maven 有全局生命周期。

但是， Ant 仍然十分有用。例如，当你需要执行一些文件操作，XSLT转换等等。
               关于 Ant 任务有一个很大的类库。包括了几乎所有功能。例如运行 JUnit 测试，转换 XML， 
	用 SCP 复制文件至远程服务器等等。

•	Ant 插件所需文件
-	一个 pom.xml
-	一个用 Ant 实现的 Mojo 描述符，
包括两部分：XML 文件中的 Ant 任务，一个提供 Mojo 描述符信息的文件。
在目录 src/main/scripts/ 下。
	例子：

-		pom.xml:
	<project>
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.sonatype.mavenbook.plugins</groupId>
	<artifactId>firstant-maven-plugin</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>maven-plugin</packaging>
	<name>Example Ant Mojo - firstant-maven-plugin</name>
	<dependencies>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-script-ant</artifactId>
			<version>2.0.6</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-plugin-plugin</artifactId>
				<version>2.3</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven</groupId>
						<artifactId>maven-plugin-tools-ant</artifactId>
						<version>2.0.5</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>
</project>


-	echo.build.xml:
<project>
	<target name="echotarget">
		<echo>${message}</echo>
	</target>
</project>



-	echo.mojos.xml:
<pluginMetadata>
	<mojos>
		<mojo>
			<goal>echo</goal>
			<call>echotarget</call>
			<description>Echos a Message</description>
			<parameters>
				<parameter>
					<name>message</name>
					<property>message</property>
					<required>false</required>
					<expression>${message}</expression>
					<type>java.lang.Object</type>
					<defaultValue>Hello Maven World</defaultValue>
					<description>Prints a message</description>
				</parameter>
			</parameters>
		</mojo>
	</mojos>
</pluginMetadata>

•	编写并运行Ant 插件
-	编写好3个 xml  文件 ( pom.xml, echo.build.xml, echo.mojos.xml )
-	在 ~/.m2/settings.xml 中配置好插件组，如 org.sonatype.mavenbook.plugins
-	mvn install
-	mvn firstant:echo

2)	用 Ruby编写插件
•	什么是 Ruby, JRuby ?
-	Ruby 是一种面向对象的脚本语言。
-	Ruby 为元编程（meta-programming）和反射提供了丰富的基础设施。
-	Ruby 对于 closure 和 block 的使用造就了一种既紧凑又不失强大的编程风格。
-	Ruby 出现于1993年。大部分人了解 Ruby 是在基于 Ruby 的 web 框架 Ruby on Rails 流行之后。
-	JRuby 是 Java 编写的 Ruby 解析器。

•	Ruby 插件所需文件
-	一个 pom.xml
-	一个用 Ruby 实现的 Mojo 。
在目录 src/main/scripts/ 下。
例子：

-	pom.xml:

<project>
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.sonatype.mavenbook.plugins</groupId>
	<artifactId>firstruby-maven-plugin</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>maven-plugin</packaging>
	<name>Example Ruby Mojo - firstruby-maven-plugin</name>
	<dependencies>
		<dependency>
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>jruby-maven-plugin</artifactId>
			<version>1.0-beta-4</version>
			<scope>runtime</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-plugin-plugin</artifactId>
				<version>2.3</version>
				<dependencies>
					<dependency>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>jruby-maven-plugin</artifactId>
						<version>1.0-beta-4</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>
</project>




-	echo.rb:

# Prints a message
# @goal "echo"
# @phase "validate"
class Echo < Mojo

	# @parameter type="java.lang.String" default-value="Hello Maven World" expression="${message}"
	def message
	end
	
	def execute
		info $message
	end
	
end

run_mojo Echo



•	编写并运行Ruby 插件
-	编写好2个文件 ( pom.xml, echo.rb )
（echo.rb ,
-	Echo 类必须继承 Mojo， 
-	Echo 类必须实现 execute()，
-	最后必须 run_mojo Echo. ）

-	在 ~/.m2/settings.xml 中配置好插件组，如 org.sonatype.mavenbook.plugins
-	mvn install
（在构建过程中，Maven Plugin 插件的 descriptor 目标应用了 JRuby 萃取器 extractor 创建了一个 plugin.xml 文件，该文件萃取了所有 Echo 类的注解。）

-	mvn firstruby:echo

•	Ruby Mojo 的实现
Ruby Mojo 在源文件中使用注释进行注解。
-	一个单独的注解如 @parameter 可以接受很多属性.
-	多个属性都必须在同一行中指定。注解属性之间不能有换行符。
-	类和参数都可以被注解。
-	关于参数可以有4种注解。

Ruby Mojo 参数的注解	描述
@parameter	接受4种属性：
	alias
	default-value
	expression
                type， 默认值是type java.lang.String

@required	“<true|false>”
@readonly	“<true|false>”
@deprecated	“<true|false>”


-	Mojo 参数可以引用 Java 类和 Maven 属性。
例子：

# This is a mojo description
# @goal test
# @phase validate
class Test < Mojo

	# @parameter type="java.lang.String" default-value="nothing" alias="a_string"
	def prop
	end

	# @parameter type="org.apache.maven.project.MavenProject" expression="${project}"
	# @required true
	def project
	end
	
	def execute
		info "The following String was passed to prop: '#{$prop}'"
		info "My project artifact is: #{$project.artifactId}"
	end
	
end

run_mojo Test

<=  通过命令 mvn install, mvn firstruby:test运行。


-	Ruby 的 Mojo 类可以使用5种注解。
Ruby Mojo 参数的注解	描述
@goal	目标的名字
@phase	该目标绑定的默认的阶段
@requiresDependencyResolution	if true, Mojo 的依赖在运行之前被解析。
@aggregator	标记该 Mojo 为聚合。
@execute	支持在运行 Mojo 之前执行一个目标或者生命周期阶段。
接受3种属性：
	goal
	phase
	lifecycle


•	Ruby Mojo 中使用日志
3种方法： info(), debug(), error().
例子：
# Tests Logging
# @goal logtest
# @phase validate
class LogTest < Mojo

	def execute
		info "Prints an INFO message"
		error "Prints an ERROR message"
		debug "Prints to the Console"
	end
	
end

run_mojo LogTest

•	Raise 一个 MojoError
例子：
# Prints a Message
# @goal error
# @phase validate
class Error < Mojo

	# @parameter type="java.lang.String" default-value="Hello Maven World" expression="${message}"
	# @required true
	# @readonly false
	# @deprecated false
	def message
	end
	
	def execute
		info $message
		raise MojoError.new( "This Mojo Raised a MojoError")
	end
	
end

run_mojo Error

•	在 JRuby 中引用 Plexus
-	Ruby Mojo 可以依赖于一个 Plexus 组件
<= 需要使用 @parameter 注解的 expression 参数，在这里为 Plexus 指定 role 和 hint。

例子：
以 Plexus 中 Archiver 组件为例：role: org.codehaus.plexus.archiver.Archiver   hint:zip

# This mojo tests plexus integration
# @goal testplexus
# @phase validate
class TestPlexus < Mojo

	# @parameter type="org.codehaus.plexus.archiver.Archiver" expression="${component.org.codehaus.plexus.archiver.Archiver#zip}"
	def archiver
	end
	
	def execute
		info $archiver
	end
	
end

run_mojo TestPlexus



1)	用 Groovy 编写插件
•	什么是 Groovy ?
-	Groovy 是一个基于 Java 虚拟机的动态语言。
-	Groovy 最终被编译成 Java 字节码。
-	Groovy 使用了 Java 的很多特性，同时进行了略微的裁剪，并加入了一些新特性，如 闭包 closure， 鸭子类型判断 duck-typing 和正则表达式。
-	Groovy 网站：http://groovy.codehaus.org.

•	Groovy 插件所需文件
-	一个 pom.xml
-	一个用 Groovy
-	 实现的 Mojo 。
在目录 src/main/groovy/ 下。
例子：

-	pom.xml:

<?xml version="1.0" encoding="UTF-8"?>
<project>
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.sonatype.mavenbook.plugins</groupId>
	<artifactId>firstgroovy-maven-plugin</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>maven-plugin</packaging>
	<name>Example Groovy Mojo - firstgroovy-maven-plugin</name>
	<dependencies>
		<dependency>
			<groupId>org.codehaus.mojo.groovy</groupId>
			<artifactId>groovy-mojo-support</artifactId>
			<version>1.0-beta-3</version>
			<scope>runtime</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-plugin-plugin</artifactId>
				<version>2.3</version>
				<dependencies>
					<dependency>
						<groupId>org.codehaus.mojo.groovy</groupId>
						<artifactId>groovy-maven-plugin</artifactId>
						<version>1.0-beta-3</version>
						<extensions>true</extensions>
						<executions>
							<execution>
								<goal>generateStubs</goal>
								<goal>compile</goal>
								<goal>generateTestStubs</goal>
								<goal>testCompile</goal>
							</execution>
						</executions>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>
</project>




-	EchoMojo.groovy:

package org.sonatype.mavenbook.plugins

import org.codehaus.mojo.groovy.GroovyMojo

/**
 * Example goal which echos a message
 *
 * @goal echo
**/
class EchoMojo extends GroovyMojo {
	/**
	* Message to print
	*
	* @parameter expression="${echo.message}" default-value="Hello Maven World"
	**/
	String message
	
	void execute() {
		log.info( message )
	}
	
	
}





•	编写并运行Groovy 插件
-	编写好2个文件 ( pom.xml, EchoMojo.groovy )
-	在 ~/.m2/settings.xml 中配置好插件组，如 org.sonatype.mavenbook.plugins
-	mvn install
-	mvn firstgroovy:echo

11.	Settings 细节
1)	Settings.xml
•	可位于两个地方：
Maven 安装目录：	    $M2_HOME/conf/settings.xml
用户特定的 Settings 文件:    ~/.m2/settings.xml

•	Settings.xml 目的： 	    只关注构建系统整体，不应该和任何一个特定的项目绑定。
•	Settings.xml 内容： 	    包括本地仓库地址，候选的远程仓库服务器，以及一些认证信息。
Settings 元素下最顶层元素的概述：

<settings 	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:SchemaLocation="http://maven.apache.org/POM/4.0.0								http://maven.apache.org/xsd/settings-1.0.0.xsd">

	<localRepository/>
	<interactiveMode/>
	<usePluginRegistry/>
	<offline/>
	
	<pluginGroups/>
	<servers/>
	<mirrors/>
	<proxies/>
	<profiles/>
	<activeProfiles/>
	
</settings>


2)	Settings 细节

Items at top level in settings.xml	Description
简单值：（4个）
	localRepository
	interactiveMode
	usePluginRegistry
	offline
	localRepository： 本地仓库的路径。
		   默认值 ${workspace}/.m2/repository。

interactiveMode：默认true。
		   如果需要和用户交互以获得输入，设为true。

usePluginRegistry：默认false。
		    如果需要使用${workspace}/.m2/plugin-registry.xml
		         来管理版本插件，设为true。

offline：默认false。
		   如果需要在离线模式下运行，设为true。


pluginGroups	包含一个 pluginGroup 元素列表，每个子元素包含了一个 groupId。

默认包含了 org.apache.maven.plugins。

servers	通常包含一些不应该和 pom.xml 一起分发的设置如安全证书。

包含子元素：
	id
	username, password
	privateKey, passphrase
	filePermissions, directoryPermissions

mirrors	包含子元素：
	id, name
	url
	mirrorOf

url 是该镜像的 URL。构建系统会优先考虑使用该 URL，而非使用默认的服务器 URL。

mirrorOf 是被镜像的服务器的 id。例如 central。central 是 Maven 中央仓库 http://repo1.maven.org/maven2 的id。

proxies	包含子元素：
	id
	active
	protocol, host, port
	username, password
	nonProxyHosts

使用： protocol://host:port.

profiles	Settings.xml 中的 profiles 是 pom.xml 中 profiles 元素的裁剪版本。

包含子元素：
	activation
	repositories
	pluginRepositories
	properties

I.	如果一个 settings 中的 profile 被激活，它的值会覆盖任何其它定义在 POM 中或者 profile.xml 中的带有相同 id 的 profile。

当activation中定义的所有条件满足的时候，该 profile 被激活。
See An example for activation below. 例如例子当中的 jdk, os, property, file.

II.	属性 Properties 有5种不同的形式，并且都能在 settings.xml 中访问：
    
Properties形式	
env.x   	Shell  环境变量
project.x	POM 中对应的元素值
settings.x	Settings.x 中对应元素的值
Java System Properties	可通过 java.lang.System.getProperties() 访问的属性
X	由 <properties/> 定义的元素，
或者外部文件中设置，
以 ${somevar} 的形式使用。


III.	仓库 repositories是 用来填充构建系统本地仓库所使用的一组远程项目。
例如配置 releases 和 snapshots 两种构件的策略，包括 
enabled, 
updatePolicy ( always, daily (default), interval:X (mins), never )
checksumPolicy ( ignore, fail, warn )

而 Maven 是从本地仓库中使用其插件和依赖。
See An example for repositories below.

IV.	插件仓库pluginRepositories
每个 pluginRepostory 元素指定一个 Maven 可以用来寻找新插件的远程地址。

仓库是两种主要构件的家。一种是被用作其它构件的依赖，另一种是插件。
Maven 插件是一种特殊类型的构件。由于此原因，插件仓库独立于其它仓库。

activeProfiles	任何在 activeProfiles 定义的 profile id，对应的 profile 都会被激活，不论环境设置如何。
如果没有匹配的 profile，则什么都不会发生。

See An example for activeProfiles below.



•	An example for activation:
<profiles>
	<profile>
		<id>test</id>
		<activation>
			<activeByDefault>false</activeByDefault>
			<jdk>1.5</jdk>
			<os>
				<name>Windows XP</name>
				<family>Windows</family>
				<arch>x86</arch>
				<version>5.1.2600</version>
			</os>
			<property>
				<name>mavenVersion</name>
				<value>2.0.3</value>
			</property>
			<file>
				<exists>/.../$file1</exists>
				<missing>/.../$file2</missing>
			</file>
		</activation>
		...
	</profile>
</profiles>

•	激活 profile 的方式：3种
I.	activation in profile section
II.	activeProfile in settings.xml file
III.	command line: ex.  mvn -P test

•	查看构件中哪些 profile 会激活：
mvn help:active-profiles

•	An example for repositories:
<profiles>
	<profile>
		...
		<repositories>
			<repository>
				<id>codehausSnapshots</id>
				<name>Codehaus Snapshots</name>
				<releases>
					<enabled>false</enabled>
					<updatePolicy>always</updatePolicy>
					<checksumPolicy>warn</checksumPolicy>
				</releases>
				<snapshots>
					<enabled>true</enabled>
					<updatePolicy>never</updatePolicy>
					<checksumPolicy>fail</checksumPolicy>
				</snapshots>
				<url>http://snapshots.maven.codehaus.org/maven2</url>
				<layout>default</layout>
			</repository>
		</repositories>
		<pluginRepositories>
		...
		</pluginRepositories>
		...
	</profile>
</profiles>

•	An example for activeProfiles:
<settings ...>
...
	<activeProfiles>
		<activeProfile>env-test</activeProfile>
	</activeProfiles>
...
</settings>
