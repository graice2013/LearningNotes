#
# install nginx on mac air
#
1) brew search nginx

2) brew install nginx
  # it will install dependencies first: pcre, openssl@1.1, then install nginx.
  
 # output:
     Updating Homebrew...
        ==> Installing dependencies for nginx: pcre, openssl@1.1
    ==> Installing nginx dependency: pcre
    ==> Downloading https://homebrew.bintray.com/bottles/pcre-8.39.yosemite.bottle.tar.gz
    ######################################################################## 100.0%
    ==> Pouring pcre-8.39.yosemite.bottle.tar.gz
    🍺  /usr/local/Cellar/pcre/8.39: 203 files, 5.4M
    ==> Installing nginx dependency: openssl@1.1
    ==> Downloading https://homebrew.bintray.com/bottles/openssl@1.1-1.1.0d.yosemite.bottle.1.tar.gz
    ######################################################################## 100.0%
    ==> Pouring openssl@1.1-1.1.0d.yosemite.bottle.1.tar.gz
    ==> Using the sandbox
    ==> Caveats
    A CA file has been bootstrapped using certificates from the system
    keychain. To add additional certificates, place .pem files in
      /usr/local/etc/openssl@1.1/certs
    
    and run
      /usr/local/opt/openssl@1.1/bin/c_rehash
    
    This formula is keg-only, which means it was not symlinked into /usr/local.
    
    This is an alternate version of another formula.
    
    If you need to have this software first in your PATH run:
      echo 'export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"' >> ~/.bash_profile
    
    For compilers to find this software you may need to set:
        LDFLAGS:  -L/usr/local/opt/openssl@1.1/lib
        CPPFLAGS: -I/usr/local/opt/openssl@1.1/include
    
    ==> Summary
    🍺  /usr/local/Cellar/openssl@1.1/1.1.0d: 6,303 files, 15.4M
    ==> Installing nginx 
    ==> Downloading https://homebrew.bintray.com/bottles/nginx-1.10.3.yosemite.bottle.tar.gz
    ##########                                                                14.0%
    ######################################################################## 100.0%
    ==> Pouring nginx-1.10.3.yosemite.bottle.tar.gz
    ==> Caveats
    Docroot is: /usr/local/var/www
    
    The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that
    nginx can run without sudo.
    
    nginx will load all files in /usr/local/etc/nginx/servers/.
    
    To have launchd start nginx now and restart at login:
      brew services start nginx
    Or, if you don't want/need a background service you can just run:
      nginx
    ==> Summary
    🍺  /usr/local/Cellar/nginx/1.10.3: 8 files, 984.9K
    
3) nginx    # or brew services start nginx

4) open browser, open http://localhost:8080   # nginx is open

# ref:  http://blog.csdn.net/xiebaochun/article/details/52205875

5)  常用的指令有：
    nginx -V 查看版本，以及配置文件地址
    nginx -v 查看版本
    nginx -c filename 指定配置文件
    nginx -t check if syntax right in nginx.conf
    
# ref:  http://blog.csdn.net/chenglei9128/article/details/47835745

6) config file: /usr/local/etc/nginx/nginx.conf
  # 6.1) two parts mainly:
  {
    # main part
      # ex. 
      user nobody;
      work_processes 1;
      error_log logs/error.log
      error_log logs/error.log info;    # works only when --with-debug is used in compiling nginx
      pid logs/nginx.pid;
      
      # 6.2) for events
      events {
        worker_connections 1024;
        
        # use epoll/...;
        # accept_mutex on|off;
        # ...
      }
      
     # http:  for virtual hosts part
     http {
        include       mime.types;
        default_type  application/octet-stream;
        
        access_log    logs/access.log main;
        send_file     on;
        keep_alive    65;
        
        # 6.3) for gzip
        # gzip          on;
        # gzip_min_length 1000;
        # ...
        
        # 6.4) another format to define server
        # define server part into another conf
        # and include conf/nginx-vhost.conf
        #
        server {
          listen      8080;
          server_name localhost;
          
          location / {
            root  html;
            index index.html index.htm;
            
            # 6.5) for authentication
            # auth_basic          "***";
            # auth_bacic_user_file /www/html/.passwd;
            
            # 6.6) for customizing headers
            # expires    24h;
            # add_header myhead test;
            
            # 6.7) for redirecting web urls
            # rewrite ^/admin/(.*)$ /web/$1;
              # grammer format: rewrite grgex replacement [flags]; 
              #         flags: ex. last, bleak, redirect, permanent.
            # 6.8) for 防盗链
            #     （1）、定义合规的引用
            #             valid_referers none | blocked | server_names | string ...;
            #      (2)、拒绝不合规的引用
            #              if ($invalid referer) {
            #               rewrite ^/ http://www.b.com/403.html;
            #              }
            
            
            # 6.9) for reverse proxy
            # proxy_pass http://192.168.9.11;
            # for cache
            # proxy_cache STATIC;
            # ...
            
          }
          
          error_page  500 502 503 504 /50x.html;
          location /50x.html {
            root html;
          }
          
          location ...
        
        }
        
        server ...
        
        # 6.10) upstream: for load balance: 3 algorithms: ip_hash, keepalive, least_conn
        # upstream web {
        #   server 192.168.9.11:80 max_fails=3 fail_timeout=10s;
        #   server 192.168.9.13:80 max_fails=3 fail_timeout=10s;
        #   server 127.0.0.1:8080 backup;
        # }
        # 
        # server {
        #   ...
        #   proxy_pass http://web;
        #   ...
        # }
     
      }
   
  }
  
  # ref:  http://www.tuicool.com/articles/yUbuIfQ
  

7) difference between Apache and Nginx
  # 核心区别：
    # apache是同步多进程模型，一个连接对应一个进程；
    # nginx是异步的，多个连接（万级别）可以对应一个进程.
  
  # ref:  http://blog.csdn.net/xo_zhang/article/details/8995756

8) Nginx开发从入门到精通
  # ref:  http://tengine.taobao.org/book/index.html
  
  



    
