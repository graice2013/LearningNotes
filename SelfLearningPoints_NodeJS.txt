SelfLearningPoints_NodeJS.txt


##
## javascript全局变量与局部变量？
##
#	ref doc: http://zhidao.baidu.com/link?url=LJL0Pn930GbhfjPP-8PyYXbETnXzwr4ZfF8h3nGUZ083hPizPVCVpK7I0h4qI1OskuZCtQCdNGoek7x_bWkR-PikamLAj8LYcUGSCBnEsXS
#

<html>
<head>
<script type="text/javascript">
/*
变量的scope是根据方法块来划分的（也就是说以function的一对大括号｛ ｝来划分）
 
Javascript在执行前(!!!!!!)会对整个脚本文件的声明部分做完整分析(包括局部变量)，从而确定实变量的作用域。
 
当全局变量跟局部变量重名时，局部变量的scope会覆盖掉全局变量的scope，(当离开局部变量的scope后，又重回到全局变量的scope，)
 
而当全局变量遇上局部变量时，用window.globalVariableName来使用全局变量
 
*/
</script>
<script>
var variable = "variable in global";
function show(){
     
    alert(variable);   //undefined 因为此时variable为局部变量但是代码执行到此处时未赋值
    //alert(window.variable);  //  variable in global   全局变量
    var variable = "variable in local"; //声明并初始化variable 
    alert(variable);   //  variable in global局部变量
};
</script>
</head>
<body>
<input type="button" onclick="show()"/>
</body>
<script>
</script>
</html>

##
## javascript : set default function parameters
##
#	ref doc: http://stackoverflow.com/questions/11942149/javascript-unassigned-default-function-parameters
#
foo = function(a){
    if (!a) a = "Some value";
    // something done with a
    return a;
}

# better use if(typeof a == "undefined") // Because !a can be true for 0, an empty string '' or just null.
# A common short hand for this is, return a || "Some value" instead of if(!a) a = "some value"; return a;






##
##	node.js中的http.response.writeHead方法使用说明
##
#	ref doc:	http://www.jb51.net/article/58471.htm
#

方法说明：
	向请求的客户端发送响应头。
	该函数在一个请求内最多只能调用一次，如果不调用，则会自动生成一个响应头。

语法：
	response.writeHead(statusCode, [reasonPhrase], [headers])

接收参数：
	statusCode              HTTP状态码，如200(请求成功），404（未找到）等。
	reasonPhrase
	headers                   类似关联数组的对象，表示响应头的每个属性

例子：
	var body = 'hello world';
	response.writeHead(200, {
	'Content-Length': body.length,
	'Content-Type': 'text/plain'
	});



##
##	node.js中的http.response.write方法使用说明
##
#	ref doc:	http://www.jb51.net/article/58469.htm
#

方法说明：
	向请求的客户端发送响应内容。
	在 response.end() 之前，response.write() 可以被执行多次。

语法：
	response.write(chunk, [encoding])

接收参数：
	chunk                   是一个buffer 或 字符串，表示发送的内容
	encoding                如果chunk是字符串，就需要指定encoding来说明它的编码方式，默认utf-8

例子：
	var http = require('http');
	http.createServer(function(req, res){
	res.writeHead(200, {'Content-type' : 'text/html'});
	res.write('<h1>Node.js</h1>');
	res.end('<p>Hello World</p>');
	}).listen(3000);



##
## nodejs : read environment variables
##
# ref doc: http://stackoverflow.com/questions/4870328/how-to-read-environment-variable-in-node-js
#
process.env.ENV_VARIABLE		// Where ENV_VARIABLE is the name of the variable you wish to access.
#
#  If you want to use a string key generated in your Node.js program, say, var v = 'HOME', you can use process.env[v].
#	Otherwise, process.env.VARNAME has to be hardcoded in your program.

# to customize environment variables
#	through an .env file
#	ref doc: http://stackoverflow.com/questions/22312671/node-js-setting-environment-variables/28821696#28821696
#
	I highly recommend looking into the dotenv package.
	https://github.com/motdotla/dotenv
	
	It's a kinda similar to the answer from @Benxamin, but it's a lot cleaner and doesn't require any bash scripts. The code base is pretty popular and is well maintained.
	Basically you need a .env file (which you can git ignore):
	
	FOO=bar
	BAZ=bob
	
	Then in your application entry file put the following line in as early as possible:
	require('dotenv').load();
	
	Boom. Done. 'process.env' will now contain the variables above:
	console.log(process.env.FOO);
	// bar
	
	The '.env' file isn't required so you don't need to worry about your app falling over in it's absence.





NodeJs初学者经典入门解析

      Node.js 是一个基于谷歌浏览器JavaScript执行环境建立的一个平台，让JavaScript可以脱离客户端浏览器运行，让JavaScript具有服务器语言的能力。我们可以使用NodeJs方便地快速的搭建 易于扩展的网络应用。Node.js 借助事件驱动， 非阻塞I/O 模型变得轻量和高效， 非常适合运行在分布式设备的数据密集型的实时应用。V8引擎执行Javascript的速度非常快，性能非常好。Node对一些特殊用例进行了优化，提供了替代的API，使得V8在非浏览器环境下运行得更好。

NodeJs入门

　　　一、下载NodeJs平台

　　　直接在百度中搜索”NodeJs“,点击nodejs官方网站。官方网站如下，然后点击Install(安装)，浏览器会弹出一个下载对话框，我们需要把NodeJs保存到电脑中。
 
 


　　  二、安装nodejs

　　  直接点击已经下载好的安装文件，建议在安装的过程中，采用默认安装，并且安装到一个没有中文和空格个路径中。

      安装程序自动会把”node“命令加入到系统PATH中，打开控制器查看”node“命令是否可用。 
     
     

         
　　　注意以上命令运行不成功的小伙伴们，那么证明你的nodejs安装失败或者是nodejs没有加入系统PATH中。

  　　三、一分钟写一个web服务器

　　　   1.新建一个文本文件，命名为app.js
         2.加入实现服务器代码


 //引入http模块
var http = require("http");
//创建服务器
var server = http.createServer(function(req,res){
    //req 请求对象
    //res 响应对象
    res.writeHead(200,{"content-type":"text/html;charset=UTF-8"});
    res.write("<h1>Hello NodeJs , 源代码教育</h1>");
    res.end();
});
//启动服务器，并且监听80端口。
server.listen(80);　　　　　

　       3.运行app.js代码
 
         4.浏览器访问

　　　　　　　 地址栏输入：http://localhost,效果如下
  

　　　　　　　　   
#
# steps
#
	1) 	install nodejs, add NODE_HOME, add PATH=%PATH%;%NODE_HOME%
	2)	npm install -g supervisor express express-generator
	
		# set proxy
		# 	npm config set proxy http://proxy.${proxy1}:8080
		# 	npm config set https-proxy http://proxy.${proxy1}:8080

	## to test 
-------------------------------------------------	
		http://weistar.iteye.com/blog/2088691
		使用express创建一个工程:
		express helloworld 注意可选择模板创建，如express -e ejs helloworld
		新版本中命令发生了一些改变, 创建好project之后还需要用npm进行添加依赖和启动:
		cd helloworld
		npm install 安装所有依赖
		npm start 运行应用
-------------------------------------------------   
	
	3)	install eclipse and nodeeclipse plugin
		# ref :    http://www.tuicool.com/articles/z2iqMr
		
		extraced eclipse from eclipse-jee-mars-1-win32.zip
			to C:\Work\tools\eclipse\eclipse\
			
			set up workspace C:\eclipse\ 
			create project -> nodejs -> tempalte: none/empty -> input project name ex. ${eclipse_project1} 
			remove everything under C:\eclipse\${eclipse_project1}\ except .settings
			copy everything under C:\git\cvom-scm2\ScmPortal2\target\bin to C:\eclipse\${eclipse_project1}\ except .settings
   
	4) git clone ssh://${git_user1}@${git_server1}:29418/${git_repo1}  
		checkout branch master_scmportal.
		
		cd C:\git\${git_repo1_local_path}
		mvn clean package		
		cd target\bin\bin
		node www
		  or
		supervisor www
		
		http://localhost:3000/
		
		
		
   
   
##
## nodejs usage
##

# userconfig:
	# C:\Users\${git_user1} \.npmrc
#
# check npm config
#
npm config get
# output example:
; cli configs
	# user-agent = "npm/3.3.6 node/v5.0.0 win32 x64"
	# 
	# ; userconfig C:\Users\${git_user1} \.npmrc
	# https-proxy = "http://proxy.${proxy1} :8080/"
	# proxy = "http://proxy.${proxy1} :8080/"
	# 
	# ; builtin config undefined
	# prefix = "C:\\Users\\${git_user1} \\AppData\\Roaming\\npm"
	# 
	# ; node bin location = C:\PROGRA~1\nodejs\node.exe
	# ; cwd = c:\eclipse\usePrac
	# ; HOME = C:\Users\${git_user1} 
	# ; "npm config ls -l" to show all defaults.

# npm config: show all defaults
npm config ls -l
npm config ls

	
# npm config:	设置"目录路径" 
npm config set prefix 

# 设定安装模式
npm set global=true
# 查看当前使用的安装模式
npm get global

# npm ref doc: 
	# http://www.cnblogs.com/linjiqin/p/3765772.html
# npm官方文档：
	# https://www.npmjs.org/doc/


	
	
 　　　　　　　　　　

















